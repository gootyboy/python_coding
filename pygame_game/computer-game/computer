import pgzrun
import time
import pygame
from pgzero.actor import Actor

WIDTH = 800
HEIGHT = 600

screen_clicked = False
key_pressed = None
password_digits = ["p", "a", "s", "s", "w", "o", "r", "d"]
box_index = 0
password_done = False
digit_correct_list = [False, False, False, False, False, False, False, False]
on_home_page = False
setting_rect_open = False
backround_icon_open = False

settings_rect = pygame.Rect(70, 76, 451, 451)

setting_icon = Actor("setting-icon")
setting_icon.pos = 450, 570

backround_icon = Actor("backround-setting")
backround_icon.pos = 270, 150

x_button = Actor("x-button")
x_button.pos = 500, 93

def make_boxes():    
    global password_boxes, box_1, box_2, box_3, box_4, box_5, box_6, box_7, box_8, password_boxes_x
    box_y = 300
    box_width = 43
    box_height = box_width
    box_dist = 60
    start = box_dist + 100
    box_1_x = start
    box_2_x = start + box_dist
    box_3_x = box_2_x + box_dist
    box_4_x = box_3_x + box_dist
    box_5_x = box_4_x + box_dist
    box_6_x = box_5_x + box_dist
    box_7_x = box_6_x + box_dist
    box_8_x = box_7_x + box_dist
    password_boxes_x = [box_1_x, box_2_x, box_3_x, box_4_x, box_5_x, box_6_x, box_7_x, box_8_x]

    box_1 = pygame.Rect(box_1_x, box_y, box_width, box_height)
    box_2 = pygame.Rect(box_2_x, box_y, box_width, box_height)
    box_3 = pygame.Rect(box_3_x, box_y, box_width, box_height)
    box_4 = pygame.Rect(box_4_x, box_y, box_width, box_height)
    box_5 = pygame.Rect(box_5_x, box_y, box_width, box_height)
    box_6 = pygame.Rect(box_6_x, box_y, box_width, box_height)
    box_7 = pygame.Rect(box_7_x, box_y, box_width, box_height)
    box_8 = pygame.Rect(box_8_x, box_y, box_width, box_height)
    password_boxes = [box_1, box_2, box_3, box_4, box_5, box_6, box_7, box_8]

def draw_answer_boxes():
    global password_digits, key_pressed
    make_boxes()
    for box in password_boxes:
        screen.draw.filled_rect(box, "sky blue")
    screen.draw.text("Password", color= "black", center = (WIDTH / 2, 250), fontsize = 60)

def get_x_of_circles():
    circle_1_x = password_boxes_x[0] + (43/2)
    circle_2_x = password_boxes_x[1] + (43/2)
    circle_3_x = password_boxes_x[2] + (43/2)
    circle_4_x = password_boxes_x[3] + (43/2)
    circle_5_x = password_boxes_x[4] + (43/2)
    circle_6_x = password_boxes_x[5] + (43/2)
    circle_7_x = password_boxes_x[6] + (43/2)
    circle_8_x = password_boxes_x[7] + (43/2)
    circles_x = [circle_1_x, circle_2_x, circle_3_x, circle_4_x, circle_5_x, circle_6_x, circle_7_x, circle_8_x]
    return circles_x

def draw_home_screen():
    screen.draw.filled_rect(pygame.Rect(0, 550, WIDTH, 50), (212,226,249))
    setting_icon.draw()

def draw():
    global screen_clicked, box_index, key_pressed, password_boxes_x,digit_correct_list, on_home_page, password_done, setting_rect_open, backround_icon_open

    time_now = time.localtime()
    time_minutes = time.strftime("%M", time_now)
    time_hours = time.strftime("%I", time_now).lstrip("0")
    if screen_clicked == False:
        screen.blit("garden", (0, 0))
    else:
        screen.blit("garden-blurred", (0, 0))

    if screen_clicked == False and on_home_page == False:
        screen.draw.text(f"{time_hours}:{time_minutes}", color="black", center=(WIDTH / 2, 50), fontsize=100)
    if screen_clicked == True and password_done == False:
        draw_answer_boxes()
    
    if screen_clicked == True and key_pressed != None and password_done == False:
        screen.draw.textbox(key_pressed, password_boxes[box_index], color= "black")

        if box_index >= 0 and  box_index<=8 and key_pressed == password_digits[box_index]:
            digit_correct_list[box_index] = True   
        key_pressed = None
    if password_done == True and all(digit_correct_list):
        screen_clicked = False
        on_home_page = True
    elif password_done == True:
        screen_clicked = True
        password_done = False
        box_index = 0
        digit_correct_list = [False, False, False, False, False, False, False, False]
    
    if screen_clicked == True:
        circles_x = get_x_of_circles()

        circle_y = 300 + (43 / 2)
        for i in range(0, 8):
            if box_index > i:
                screen.draw.filled_circle((circles_x[i], circle_y), 10, "black")
    
    if on_home_page:
        draw_home_screen()
        if setting_rect_open:
            screen.draw.filled_rect(settings_rect, (239,244,249))
            backround_icon.draw()
            x_button.draw()
        
def on_key_up(key):
    global box_index, key_pressed, password_done, password_digits,digit_1

    if box_index < 7:
        box_index += 1
    else:
        password_done = True

def on_mouse_down(pos, button):
    global screen_clicked, on_home_page, setting_rect_open, backround_icon_open
    if on_home_page == False:
        screen_clicked = True
    else:
        if setting_icon.collidepoint(pos) and button == mouse.LEFT:
            setting_rect_open = True
        if x_button.collidepoint(pos) and button == mouse.LEFT:
            setting_rect_open = False
        if backround_icon.collidepoint(pos):
            backround_icon_open = False

def update():
    global key_pressed, screen_clicked, password_done

    if password_done == False:
        if screen_clicked:
            if keyboard.q:
                key_pressed = "q"
            if keyboard.w:
                key_pressed = "w"
            if keyboard.e:
                key_pressed = "e"
            if keyboard.r:
                key_pressed = "r"
            if keyboard.t:
                key_pressed = "t"
            if keyboard.y:
                key_pressed = "y"
            if keyboard.u:
                key_pressed = "u"
            if keyboard.i:
                key_pressed = "i"
            if keyboard.o:
                key_pressed = "o"
            if keyboard.p:
                key_pressed = "p"
            if keyboard.a:
                key_pressed = "a"
            if keyboard.s:
                key_pressed = "s"
            if keyboard.d:
                key_pressed = "d"
            if keyboard.f:
                key_pressed = "f"
            if keyboard.g:
                key_pressed = "g"
            if keyboard.h:
                key_pressed = "h"
            if keyboard.j:
                key_pressed = "j"
            if keyboard.k:
                key_pressed = "k"
            if keyboard.l:
                key_pressed = "l"
            if keyboard.z:
                key_pressed = "z"
            if keyboard.x:
                key_pressed = "x"
            if keyboard.c:
                key_pressed = "c"
            if keyboard.v:
                key_pressed = "v"
            if keyboard.b:
                key_pressed = "b"
            if keyboard.n:
                key_pressed = "n"
            if keyboard.m:
                key_pressed = "m"
        
pgzrun.go()